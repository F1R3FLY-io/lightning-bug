name: CI and Release
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write

jobs:
  lint-and-test-types:
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: npm
          cache-dependency-path: package-lock.json
          registry-url: 'https://npm.pkg.github.com'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@13.4
        with:
          cli: latest

      - name: Cache clojure dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
            .cpcache
          key: cljdeps-${{ hashFiles('deps.edn') }}
          restore-keys: cljdeps-

      - name: Install dependencies
        run: npm install

      - name: Lint
        run: npm run lint

      - name: Run type tests
        run: npm run test:types

  test-debug:
    needs: [lint-and-test-types]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chrome, firefox, edge, opera]
        include:
          - os: macos-latest
            browser: safari
    runs-on: ${{ matrix.os }}
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: npm
          cache-dependency-path: package-lock.json
          registry-url: 'https://npm.pkg.github.com'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@13.4
        with:
          cli: latest

      - name: Cache clojure dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
            .cpcache
          key: cljdeps-${{ hashFiles('deps.edn') }}
          restore-keys: cljdeps-

      - name: Install dependencies
        run: npm install

      - name: Install system dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt upgrade -y
          sudo apt install -y dirmngr ca-certificates software-properties-common apt-transport-https curl dbus dbus-x11 gsettings-desktop-schemas upower xvfb

      - name: Prepare test
        run: npm run prepare:all

      - name: Setup Chrome
        if: matrix.browser == 'chrome'
        id: setup-chrome
        uses: browser-actions/setup-chrome@v2
        with:
          chrome-version: stable

      - name: Setup Firefox
        if: matrix.browser == 'firefox'
        id: setup-firefox
        uses: browser-actions/setup-firefox@v1
        with:
          firefox-version: latest

      - name: Setup Edge
        if: matrix.browser == 'edge' && matrix.os == 'ubuntu-latest'
        id: setup-edge-ubuntu
        uses: browser-actions/setup-edge@v1
        with:
          edge-version: stable

      - name: Setup Edge
        if: matrix.browser == 'edge' && matrix.os == 'macos-latest'
        run: brew install --cask microsoft-edge

      - name: Set EDGE_BIN
        if: matrix.browser == 'edge'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "EDGE_BIN=C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "EDGE_BIN=/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge" >> $GITHUB_ENV
          else
            echo "EDGE_BIN=${{ steps.setup-edge-ubuntu.outputs.edge-path }}" >> $GITHUB_ENV
          fi

      - name: Install Opera
        if: matrix.browser == 'opera' && matrix.os == 'ubuntu-latest'
        run: |
          curl -fsSL https://deb.opera.com/archive.key | gpg --dearmor | sudo tee /usr/share/keyrings/opera.gpg > /dev/null
          echo deb [arch=amd64 signed-by=/usr/share/keyrings/opera.gpg] https://deb.opera.com/opera-stable/ stable non-free | sudo tee /etc/apt/sources.list.d/opera.list
          sudo apt update
          sudo apt install opera-stable -y

      - name: Install Opera
        if: matrix.browser == 'opera' && matrix.os == 'macos-latest'
        run: brew install --cask opera

      - name: Install Opera
        if: matrix.browser == 'opera' && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          winget install --id Opera.Opera --exact --accept-package-agreements --accept-source-agreements
          $operaPath = "$env:LOCALAPPDATA\Programs\Opera\opera.exe"
          if (Test-Path $operaPath) {
            echo "OPERA_BIN=$operaPath" >> $env:GITHUB_ENV
          } else {
            Write-Error "Opera executable not found at $operaPath"
          }

      - name: Set OPERA_BIN
        if: matrix.browser == 'opera'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo "OPERA_BIN=/usr/bin/opera" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "OPERA_BIN=/Applications/Opera.app/Contents/MacOS/Opera" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo "OPERA_BIN=${LOCALAPPDATA//\\//}/Programs/Opera/opera.exe" >> $GITHUB_ENV
          fi

      - name: Start services
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo service dbus start
          sudo service upower start

      - name: Set KARMA_BROWSERS
        run: |
          case "${{ matrix.browser }}" in
            chrome) echo "KARMA_BROWSERS=ChromeHeadlessNoSandbox" >> $GITHUB_ENV ;;
            firefox) echo "KARMA_BROWSERS=FirefoxHeadless" >> $GITHUB_ENV ;;
            edge) echo "KARMA_BROWSERS=EdgeHeadless" >> $GITHUB_ENV ;;
            opera) echo "KARMA_BROWSERS=OperaHeadless" >> $GITHUB_ENV ;;
            safari) echo "KARMA_BROWSERS=Safari" >> $GITHUB_ENV ;;
          esac
        shell: bash

      - name: Run headless tests
        if: matrix.os == 'ubuntu-latest'
        run: dbus-run-session -- xvfb-run --auto-servernum npm run test:debug

      - name: Run headless tests
        if: matrix.os != 'ubuntu-latest'
        run: npm run test:debug

      - name: Build demo (dev)
        if: matrix.browser != 'safari'
        run: npm run build:demo

      - name: Run sanity test (dev)
        if: matrix.os == 'ubuntu-latest' && matrix.browser != 'safari'
        env:
          TEST_BROWSER: ${{ matrix.browser }}
          CHROME_BIN: ${{ matrix.browser == 'chrome' && steps.setup-chrome.outputs.chrome-path || '' }}
          FIREFOX_BIN: ${{ matrix.browser == 'firefox' && steps.setup-firefox.outputs.firefox-path || '' }}
          EDGE_BIN: ${{ matrix.browser == 'edge' && env.EDGE_BIN || '' }}
          OPERA_BIN: ${{ matrix.browser == 'opera' && env.OPERA_BIN || '' }}
          SAFARI_BIN: /Applications/Safari.app/Contents/MacOS/Safari
        run: dbus-run-session -- xvfb-run --auto-servernum node scripts/test-demo.js

      - name: Run sanity test (dev)
        if: matrix.os != 'ubuntu-latest' && matrix.browser != 'safari'
        env:
          TEST_BROWSER: ${{ matrix.browser }}
          CHROME_BIN: ${{ matrix.browser == 'chrome' && steps.setup-chrome.outputs.chrome-path || '' }}
          FIREFOX_BIN: ${{ matrix.browser == 'firefox' && steps.setup-firefox.outputs.firefox-path || '' }}
          EDGE_BIN: ${{ matrix.browser == 'edge' && env.EDGE_BIN || '' }}
          OPERA_BIN: ${{ matrix.browser == 'opera' && env.OPERA_BIN || '' }}
          SAFARI_BIN: /Applications/Safari.app/Contents/MacOS/Safari
        run: node scripts/test-demo.js

  test-release:
    needs: [lint-and-test-types]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chrome, firefox, edge, opera]
        include:
          - os: macos-latest
            browser: safari
    runs-on: ${{ matrix.os }}
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: npm
          cache-dependency-path: package-lock.json
          registry-url: 'https://npm.pkg.github.com'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@13.4
        with:
          cli: latest

      - name: Cache clojure dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
            .cpcache
          key: cljdeps-${{ hashFiles('deps.edn') }}
          restore-keys: cljdeps-

      - name: Install dependencies
        run: npm install

      - name: Install system dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt upgrade -y
          sudo apt install -y dirmngr ca-certificates software-properties-common apt-transport-https curl dbus dbus-x11 gsettings-desktop-schemas upower xvfb

      - name: Prepare test
        run: npm run prepare:all

      - name: Setup Chrome
        if: matrix.browser == 'chrome'
        id: setup-chrome
        uses: browser-actions/setup-chrome@v2
        with:
          chrome-version: stable

      - name: Setup Firefox
        if: matrix.browser == 'firefox'
        id: setup-firefox
        uses: browser-actions/setup-firefox@v1
        with:
          firefox-version: latest

      - name: Setup Edge
        if: matrix.browser == 'edge' && matrix.os == 'ubuntu-latest'
        id: setup-edge-ubuntu
        uses: browser-actions/setup-edge@v1
        with:
          edge-version: stable

      - name: Setup Edge
        if: matrix.browser == 'edge' && matrix.os == 'macos-latest'
        run: brew install --cask microsoft-edge

      - name: Set EDGE_BIN
        if: matrix.browser == 'edge'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "EDGE_BIN=C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "EDGE_BIN=/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge" >> $GITHUB_ENV
          else
            echo "EDGE_BIN=${{ steps.setup-edge-ubuntu.outputs.edge-path }}" >> $GITHUB_ENV
          fi

      - name: Install Opera
        if: matrix.browser == 'opera' && matrix.os == 'ubuntu-latest'
        run: |
          curl -fsSL https://deb.opera.com/archive.key | gpg --dearmor | sudo tee /usr/share/keyrings/opera.gpg > /dev/null
          echo deb [arch=amd64 signed-by=/usr/share/keyrings/opera.gpg] https://deb.opera.com/opera-stable/ stable non-free | sudo tee /etc/apt/sources.list.d/opera.list
          sudo apt update
          sudo apt install opera-stable -y

      - name: Install Opera
        if: matrix.browser == 'opera' && matrix.os == 'macos-latest'
        run: brew install --cask opera

      - name: Install Opera
        if: matrix.browser == 'opera' && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          winget install --id Opera.Opera --exact --accept-package-agreements --accept-source-agreements
          $operaPath = "$env:LOCALAPPDATA\Programs\Opera\opera.exe"
          if (Test-Path $operaPath) {
            echo "OPERA_BIN=$operaPath" >> $env:GITHUB_ENV
          } else {
            Write-Error "Opera executable not found at $operaPath"
          }

      - name: Set OPERA_BIN
        if: matrix.browser == 'opera'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo "OPERA_BIN=/usr/bin/opera" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "OPERA_BIN=/Applications/Opera.app/Contents/MacOS/Opera" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo "OPERA_BIN=${LOCALAPPDATA//\\//}/Programs/Opera/opera.exe" >> $GITHUB_ENV
          fi

      - name: Start services
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo service dbus start
          sudo service upower start

      - name: Set KARMA_BROWSERS
        run: |
          case "${{ matrix.browser }}" in
            chrome) echo "KARMA_BROWSERS=ChromeHeadlessNoSandbox" >> $GITHUB_ENV ;;
            firefox) echo "KARMA_BROWSERS=FirefoxHeadless" >> $GITHUB_ENV ;;
            edge) echo "KARMA_BROWSERS=EdgeHeadless" >> $GITHUB_ENV ;;
            opera) echo "KARMA_BROWSERS=OperaHeadless" >> $GITHUB_ENV ;;
            safari) echo "KARMA_BROWSERS=Safari" >> $GITHUB_ENV ;;
          esac
        shell: bash

      - name: Run headless advanced tests
        if: matrix.os == 'ubuntu-latest'
        run: dbus-run-session -- xvfb-run --auto-servernum npm run test:release

      - name: Run headless advanced tests
        if: matrix.os != 'ubuntu-latest'
        run: npm run test:release

      - name: Build demo (release)
        if: matrix.browser != 'safari'
        env:
          MODE: release
        run: npm run build:demo

      # Quick-and-dirty method for stripping the erroneous `goog=goog||{};`
      # statement from the compiled libs.
      # ----------------------------------------------------------------------
      # TODO: Replace this with a proper fix when possible. I had it fixed but
      # it snuck back in somehow ...
      # ----------------------------------------------------------------------
      - name: Strip goog
        if: matrix.browser != 'safari'
        run: node scripts/strip-goog.js dist/libs/lib.core.js

      - name: Run sanity test (release)
        if: matrix.os == 'ubuntu-latest' && matrix.browser != 'safari'
        env:
          TEST_BROWSER: ${{ matrix.browser }}
          CHROME_BIN: ${{ matrix.browser == 'chrome' && steps.setup-chrome.outputs.chrome-path || '' }}
          FIREFOX_BIN: ${{ matrix.browser == 'firefox' && steps.setup-firefox.outputs.firefox-path || '' }}
          EDGE_BIN: ${{ matrix.browser == 'edge' && env.EDGE_BIN || '' }}
          OPERA_BIN: ${{ matrix.browser == 'opera' && env.OPERA_BIN || '' }}
          SAFARI_BIN: /Applications/Safari.app/Contents/MacOS/Safari
        run: dbus-run-session -- xvfb-run --auto-servernum node scripts/test-demo.js

      - name: Run sanity test (release)
        if: matrix.os != 'ubuntu-latest' && matrix.browser != 'safari'
        env:
          TEST_BROWSER: ${{ matrix.browser }}
          CHROME_BIN: ${{ matrix.browser == 'chrome' && steps.setup-chrome.outputs.chrome-path || '' }}
          FIREFOX_BIN: ${{ matrix.browser == 'firefox' && steps.setup-firefox.outputs.firefox-path || '' }}
          EDGE_BIN: ${{ matrix.browser == 'edge' && env.EDGE_BIN || '' }}
          OPERA_BIN: ${{ matrix.browser == 'opera' && env.OPERA_BIN || '' }}
          SAFARI_BIN: /Applications/Safari.app/Contents/MacOS/Safari
        run: node scripts/test-demo.js

      - name: Upload libs artifact
        if: matrix.os == 'ubuntu-latest' && matrix.browser == 'chrome'
        uses: actions/upload-artifact@v4
        with:
          name: libs-artifact
          path: |
            dist/**
            types/**
            resources/public/extensions/**
            scripts/postinstall.js

  release:
    needs: [test-debug, test-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          registry-url: 'https://npm.pkg.github.com'

      - name: Download libs artifact
        uses: actions/download-artifact@v4
        with:
          name: libs-artifact
          path: .

      - name: Publish to GitHub Packages
        run: npm publish --access public
