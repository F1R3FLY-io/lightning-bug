name: CI and Release
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write

jobs:
  lint-and-test-types:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: npm
          cache-dependency-path: package-lock.json
          registry-url: 'https://npm.pkg.github.com'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@13.4
        with:
          cli: latest

      - name: Cache clojure dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
            .cpcache
          key: cljdeps-${{ hashFiles('deps.edn') }}
          restore-keys: cljdeps-

      - name: Install dependencies
        run: npm install

      - name: Lint
        run: npm run lint

      - name: Run type tests
        run: npm run test:types

  test:
    timeout-minutes: 10
    needs: [lint-and-test-types]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chrome, firefox, edge, opera, brave]
        mode: [debug, release]
        include:
          - os: macos-latest
            browser: safari
            mode: debug
          - os: macos-latest
            browser: safari
            mode: release
    runs-on: ${{ matrix.os }}
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: npm
          cache-dependency-path: package-lock.json
          registry-url: 'https://npm.pkg.github.com'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@13.4
        with:
          cli: latest

      - name: Cache clojure dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
            .cpcache
          key: cljdeps-${{ hashFiles('deps.edn') }}
          restore-keys: cljdeps-

      - name: Install dependencies
        run: npm install

      - name: Install Playwright WebKit
        if: matrix.browser == 'safari'
        run: npx playwright install webkit

      - name: Prepare test
        run: npm run prepare:all

      - name: Install Browser
        if: matrix.browser != 'safari'
        run: node scripts/install-browser.js "${{ matrix.browser }}"

      - name: Set CHROME_BIN
        if: matrix.browser == 'chrome'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "CHROME_BIN=C:/Program Files/Google/Chrome/Application/chrome.exe" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "CHROME_BIN=/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" >> $GITHUB_ENV
          else
            echo "CHROME_BIN=/usr/bin/google-chrome-stable" >> $GITHUB_ENV
          fi

      - name: Set FIREFOX_BIN
        if: matrix.browser == 'firefox'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "FIREFOX_BIN=C:/Program Files/Mozilla Firefox/firefox.exe" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "FIREFOX_BIN=/Applications/Firefox.app/Contents/MacOS/firefox" >> $GITHUB_ENV
          else
            echo "FIREFOX_BIN=/usr/bin/firefox" >> $GITHUB_ENV
          fi

      - name: Set EDGE_BIN
        if: matrix.browser == 'edge'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "EDGE_BIN=C:/Program Files (x86)/Microsoft/Edge/Application/msedge.exe" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "EDGE_BIN=/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge" >> $GITHUB_ENV
          else
            echo "EDGE_BIN=/usr/bin/microsoft-edge-stable" >> $GITHUB_ENV
          fi

      - name: Set OPERA_BIN
        if: matrix.browser == 'opera'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo "OPERA_BIN=/usr/bin/opera" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "OPERA_BIN=/Applications/Opera.app/Contents/MacOS/Opera" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo "OPERA_BIN=C:/Program Files/Opera/opera.exe" >> $GITHUB_ENV
          fi

      - name: Set BRAVE_BIN
        if: matrix.browser == 'brave'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "BRAVE_BIN=C:/Users/runneradmin/AppData/Local/BraveSoftware/Brave-Browser/Application/brave.exe" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "BRAVE_BIN=/Applications/Brave Browser.app/Contents/MacOS/Brave Browser" >> $GITHUB_ENV
          else
            echo "BRAVE_BIN=/usr/bin/brave-browser" >> $GITHUB_ENV
          fi

      - name: Start services
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo service dbus start
          sudo service upower start

      - name: Set KARMA_BROWSERS
        shell: bash
        run: |
          case "${{ matrix.browser }}" in
            chrome) echo "KARMA_BROWSERS=ChromeHeadlessNoSandbox" >> $GITHUB_ENV ;;
            firefox) echo "KARMA_BROWSERS=FirefoxHeadless" >> $GITHUB_ENV ;;
            edge) echo "KARMA_BROWSERS=EdgeHeadless" >> $GITHUB_ENV ;;
            opera) echo "KARMA_BROWSERS=OperaHeadless" >> $GITHUB_ENV ;;
            safari) echo "KARMA_BROWSERS=WebkitHeadless" >> $GITHUB_ENV ;;
            brave) echo "KARMA_BROWSERS=BraveHeadless" >> $GITHUB_ENV ;;
          esac

      - name: Run headless tests
        run: node scripts/retry.js "npm run test:${{ matrix.mode }}"

      - name: Build demo
        run: npx cross-env MODE=${{ matrix.mode }} npm run build:demo

      - name: Run sanity test
        env:
          TEST_BROWSER: ${{ matrix.browser }}
          CHROME_BIN: ${{ env.CHROME_BIN }}
          FIREFOX_BIN: ${{ env.FIREFOX_BIN }}
          EDGE_BIN: ${{ env.EDGE_BIN }}
          OPERA_BIN: ${{ env.OPERA_BIN }}
          SAFARI_BIN: /Applications/Safari.app/Contents/MacOS/Safari
          BRAVE_BIN: ${{ env.BRAVE_BIN }}
        run: node scripts/retry.js "node scripts/test-demo.js"

      - name: Upload libs artifact
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' && matrix.browser == 'chrome' && matrix.mode == 'release'
        with:
          name: libs-artifact
          path: |
            dist/**
            types/**
            resources/public/extensions/**
            scripts/postinstall.js

  release:
    timeout-minutes: 10
    needs: [lint-and-test-types, test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          registry-url: 'https://npm.pkg.github.com'

      - name: Download libs artifact
        uses: actions/download-artifact@v4
        with:
          name: libs-artifact
          path: .

      - name: Publish to GitHub Packages
        run: npm publish --access public
